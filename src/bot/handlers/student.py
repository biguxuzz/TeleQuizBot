from telebot import TeleBot
from src.database.models import User, Answer, Score, init_db
from src.bot.keyboards import get_student_main_menu, get_share_contact_keyboard, get_answer_options_keyboard
from src.utils.helpers import is_registered_student, is_teacher
from src.database.operations import DatabaseOperations
from src.utils.logger import logger
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
from src.utils.test_utils import send_test_question
from src.bot.states import StudentStates
from src.utils.state_storage import state_storage, data_storage

session = init_db()

logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {StudentStates.waiting_for_name}, {StudentStates.waiting_for_contact}")

def register_handlers(bot: TeleBot):
    logger.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞")

    def get_name(message):
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏: {message.text}")
            name_parts = message.text.split()
            if len(name_parts) < 2:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –§–∞–º–∏–ª–∏—é, –∏ –ò–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['last_name'] = name_parts[0]
                data['first_name'] = ' '.join(name_parts[1:])
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

            bot.set_state(message.from_user.id, StudentStates.waiting_for_contact, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
                reply_markup=get_share_contact_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def handle_contact(message):
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º")
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {message.contact}")
            if not message.contact:
                logger.warning("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                last_name = data.get('last_name')
                first_name = data.get('first_name')
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: last_name={last_name}, first_name={first_name}")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            db_ops = DatabaseOperations(session)
            db_ops.create_user(
                telegram_id=message.from_user.id,
                first_name=first_name,
                last_name=last_name,
                phone=message.contact.phone_number,
                is_teacher=False
            )
            logger.info(f"–°—Ç—É–¥–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {message.from_user.id}")

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            bot.delete_state(message.from_user.id, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                reply_markup=get_student_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    state_handlers = {
        StudentStates.waiting_for_name: get_name,
        StudentStates.waiting_for_contact: handle_contact
    }

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    @bot.message_handler(commands=['start'])
    def start(message):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            if is_registered_student(message.from_user.id):
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                bot.send_message(
                    message.chat.id,
                    "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                    reply_markup=get_student_main_menu()
                )
                return
            
            bot.set_state(message.from_user.id, StudentStates.waiting_for_name, message.chat.id)
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {bot.get_state(message.from_user.id, message.chat.id)}")
            bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    @bot.message_handler(func=lambda message: not is_teacher(message.from_user.id), content_types=['text', 'contact'])
    def handle_message(message):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            stored_data = state_storage.data.get(message.from_user.id, {}).get(message.from_user.id, {})
            stored_state = stored_data.get('state')
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if message.text == "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!":
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                send_test_question(bot, message.from_user.id, session)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
            if message.text == "üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥":
                logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞")
                try:
                    db_ops = DatabaseOperations(session)
                    scores = db_ops.get_user_scores(message.from_user.id)
                    if not scores:
                        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                        return

                    response = "üìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
                    for score in scores:
                        response += f"–†–∞–∑–¥–µ–ª '{score.section}': {score.points} –±–∞–ª–ª–æ–≤\n"
                    
                    bot.reply_to(message, response)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}", exc_info=True)
                    bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                return

            elif message.text == "‚ùì –ü–æ–º–æ—â—å":
                logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–æ–º–æ—â—å")
                help_text = (
                    "üéì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
                    "1Ô∏è‚É£ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                    "2Ô∏è‚É£ –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è—Ö\n"
                    "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                    "4Ô∏è‚É£ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"
                )
                bot.reply_to(message, help_text)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            current_state = bot.get_state(message.from_user.id, message.chat.id)
            if current_state:
                if str(current_state) == str(StudentStates.waiting_for_name):
                    get_name(message)
                elif str(current_state) == str(StudentStates.waiting_for_contact):
                    if message.content_type == 'contact':
                        handle_contact(message)
                    else:
                        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def process_answer(user_id: int, answer_number: int):
        try:
            db_ops = DatabaseOperations(session)
            current_question = db_ops.get_current_question(user_id)
            is_correct = answer_number == current_question.correct_answer_number
            db_ops.record_answer(user_id, current_question.id, answer_number, is_correct)
            
            if is_correct:
                bot.send_message(user_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                bot.send_message(user_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        except Exception as e:
            logger.error(f"Error processing answer: {e}")
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

    def send_next_question(user_id: int):
        try:
            db_ops = DatabaseOperations(session)
            question = db_ops.get_next_question(user_id)
            if not question:
                bot.send_message(user_id, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                return
            
            bot.send_message(
                user_id,
                question.text,
                reply_markup=get_answer_options_keyboard(question.answers_options)
            )
        except Exception as e:
            logger.error(f"Error sending next question: {e}")
            bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
    def handle_answer(call):
        try:
            user_id = call.from_user.id
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data_storage.data}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
            user_data = data_storage.data.get(user_id)
            if not user_data:
                logger.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                return
                
            test_data = user_data.get('data', {})
            current_question = test_data.get('current_question')
            answer_mapping = test_data.get('current_answer_mapping', {})
            test_sections = test_data.get('test_sections', [])
            
            if not current_question or not answer_mapping:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞")
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            answer_index = int(call.data.split('_')[1])
            selected_answer = answer_mapping.get(answer_index)
            
            if not selected_answer:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º {answer_index}")
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = selected_answer.is_correct
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
            db_ops = DatabaseOperations(session)
            if is_correct:
                test_data['score'] = test_data.get('score', 0) + 1
                response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                for section in test_sections:
                    current_score = db_ops.get_user_score(user_id, section)
                    new_score = current_score.points + 1 if current_score else 1
                    if not db_ops.update_or_create_score(user_id, section, new_score):
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_ops.record_answer(
                student_id=user_id,
                question_id=current_question.id,
                answer_number=answer_index,
                is_correct=is_correct
            )
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            test_data['current_question_index'] = test_data.get('current_question_index', 0) + 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_data['data'] = test_data
            data_storage.data[user_id] = user_data
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.answer_callback_query(call.id, response)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            send_test_question(bot, user_id, session)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞")