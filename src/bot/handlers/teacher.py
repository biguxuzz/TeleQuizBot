from telebot import TeleBot
from telebot.storage import StateMemoryStorage
from src.database.models import Question, AnswerOption, Video, init_db
from src.bot.keyboards import get_teacher_main_menu, get_sections_keyboard
from src.utils.helpers import is_teacher
from src.database.operations import DatabaseOperations
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from src.utils.logger import logger
from src.bot.states import StudentStates, TeacherStates
from src.utils.test_utils import send_test_question
from src.utils.state_storage import state_storage, data_storage
import random
from telebot.apihelper import ApiTelegramException

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
session = init_db()
state_storage = StateMemoryStorage()
state_storage.update_types = ['message', 'callback_query']

logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {TeacherStates.waiting_for_question}, {TeacherStates.waiting_for_answers}")

def register_handlers(bot: TeleBot):
    logger.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
    db_ops = DatabaseOperations(session)

    def handle_question(message):
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞: {message.text}")
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['question_text'] = message.text
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {data['question_text']}")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å–∞
            bot.set_state(message.from_user.id, TeacherStates.waiting_for_section, message.chat.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            sections = db_ops.get_available_sections()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            sections = sections if sections else []
            sections.append("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏
            markup = InlineKeyboardMarkup()
            for section in sections:
                markup.add(InlineKeyboardButton(section, callback_data=f"section_{section}"))
            
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    def handle_answers(message):
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: {message.text}")
            answers = message.text.split('\n')
            if len(answers) < 2:
                bot.reply_to(message, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                question_text = data['question_text']
                section = data.get('section', '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã')  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {question_text}, —Ä–∞–∑–¥–µ–ª: {section}")

            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ
            logger.info(f"–°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –æ—Ç–≤–µ—Ç–∞–º–∏: {answers}")
            db_ops = DatabaseOperations(session)
            db_ops.create_question(
                text=question_text,
                section=section,
                answers=answers
            )
            logger.info("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ")

            bot.delete_state(message.from_user.id, message.chat.id)
            bot.send_message(
                message.chat.id,
                "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=get_teacher_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞")

    def handle_video(message):
        try:
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ")
            if not message.video:
                logger.warning("–í–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ")
                return

            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['video_file_id'] = message.video.file_id
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω file_id –≤–∏–¥–µ–æ: {data['video_file_id']}")

            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–£—Å–ø–µ—Ö", callback_data="video_success"))
            markup.add(InlineKeyboardButton("–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö", callback_data="video_partial"))
            markup.add(InlineKeyboardButton("–ù–µ—É–¥–∞—á–∞", callback_data="video_failure"))

            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ:",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    @bot.message_handler(commands=['teacher'])
    def teacher_start(message):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /teacher –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            if not is_teacher(message.from_user.id):
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –ø—Ä–∞–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
                bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
                return

            bot.send_message(
                message.chat.id,
                "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
                reply_markup=get_teacher_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ teacher_start: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    @bot.message_handler(func=lambda message: is_teacher(message.from_user.id), content_types=['text', 'video'])
    def handle_message(message):
        try:
            current_state = bot.get_state(message.from_user.id, message.chat.id)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ {message.content_type}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º db_ops –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
            db_ops = DatabaseOperations(session)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if current_state:
                if str(current_state) == str(TeacherStates.waiting_for_question):
                    handle_question(message)
                elif str(current_state) == str(TeacherStates.waiting_for_answers):
                    handle_answers(message)
                elif str(current_state) == str(TeacherStates.waiting_for_section):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞: {message.text}")
                    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                        data['section'] = message.text
                        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: {message.text}")
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
                    bot.send_message(
                        message.chat.id,
                        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º:"
                    )
                    bot.set_state(message.from_user.id, TeacherStates.waiting_for_answers, message.chat.id)
                elif str(current_state) == str(TeacherStates.waiting_for_video):
                    if message.content_type == 'video':
                        handle_video(message)
                    else:
                        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ")
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
            if message.content_type == 'text':
                if message.text == "üìù –°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
                    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
                    bot.set_state(message.from_user.id, TeacherStates.waiting_for_question, message.chat.id)
                    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:")
                    return

                elif message.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤":
                    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤")
                    try:
                        sections = db_ops.get_available_sections()
                        if not sections:
                            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
                            return

                        response = "üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º:\n\n"
                        for section in sections:
                            questions = db_ops.get_questions_by_section(section)
                            if questions:
                                response += f"üìö –†–∞–∑–¥–µ–ª: {section}\n"
                                for i, question in enumerate(questions, 1):
                                    response += f"{i}. {question.text}\n"
                                response += "\n"

                        bot.reply_to(message, response)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}", exc_info=True)
                        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
                    return

                elif message.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ":
                    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    try:
                        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        bot.delete_state(message.from_user.id, message.chat.id)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        bot.set_state(message.from_user.id, TeacherStates.waiting_for_test_sections, message.chat.id)
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                        if message.from_user.id not in state_storage.data:
                            state_storage.data[message.from_user.id] = {}
                        if message.from_user.id not in state_storage.data[message.from_user.id]:
                            state_storage.data[message.from_user.id][message.from_user.id] = {}
                        
                        teacher_data = state_storage.data[message.from_user.id][message.from_user.id]
                        teacher_data['state'] = str(TeacherStates.waiting_for_test_sections)
                        teacher_data['data'] = {'selected_sections': []}
                        
                        sections = db_ops.get_available_sections()
                        if not sections:
                            bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                            return
                        
                        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {sections}")
                        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {bot.get_state(message.from_user.id, message.chat.id)}")
                        logger.info(f"–î–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {state_storage.data}")
                        
                        markup = get_sections_keyboard(sections)
                        bot.reply_to(
                            message, 
                            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):", 
                            reply_markup=markup
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
                        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return

                elif message.text == "üìà –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤":
                    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
                    try:
                        scores = db_ops.get_all_scores()
                        if not scores:
                            bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–π—Ç–∏–Ω–≥–µ")
                            return
                        
                        response = "üìä –†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
                        for score in scores:
                            response += f"{score.user.last_name} {score.user.first_name}: {score.points} –±–∞–ª–ª–æ–≤ ({score.section})\n"
                        
                        bot.reply_to(message, response)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}", exc_info=True)
                        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                    return

                elif message.text == "üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ":
                    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ")
                    bot.set_state(message.from_user.id, TeacherStates.waiting_for_video, message.chat.id)
                    bot.send_message(
                        message.chat.id,
                        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Ü–µ–Ω–∫–∏."
                    )
                    return

                elif message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è":
                    logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π")
                    try:
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        state_storage.data.clear()
                        logger.info("–í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
                        
                        bot.reply_to(
                            message,
                            "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã",
                            reply_markup=get_teacher_main_menu()
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}", exc_info=True)
                        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
                    return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è: {e}", exc_info=True)
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.delete_state(message.from_user.id, message.chat.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ
    @bot.callback_query_handler(func=lambda call: call.data.startswith('video_'))
    def handle_video_criteria(call):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –≤–∏–¥–µ–æ: {call.data}")
            criteria = call.data.split('_')[1]
            
            with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
                video_file_id = data['video_file_id']
                logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id –≤–∏–¥–µ–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {video_file_id}")
            
            db_ops = DatabaseOperations(session)
            db_ops.save_video(
                file_id=video_file_id,
                criteria=criteria
            )
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∫—Ä–∏—Ç–µ—Ä–∏–µ–º: {criteria}")
            
            bot.delete_state(call.from_user.id, call.message.chat.id)
            bot.edit_message_text(
                "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                call.message.chat.id,
                call.message.message_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –≤–∏–¥–µ–æ: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
    @bot.callback_query_handler(func=lambda call: call.data.startswith('section_') and bot.get_state(call.from_user.id, call.message.chat.id) == TeacherStates.waiting_for_section)
    def handle_section_choice(call):
        try:
            section = call.data.split('section_')[1]
            logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {section}")
            
            if section == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª":
                bot.answer_callback_query(call.id)
                bot.edit_message_text(
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:",
                    call.message.chat.id,
                    call.message.message_id
                )
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            bot.set_state(call.from_user.id, TeacherStates.waiting_for_answers, call.message.chat.id)
            with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
                if data is None:
                    data = {}
                data['section'] = section
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–∑–¥–µ–ª: {section}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            bot.answer_callback_query(call.id)
            bot.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º:",
                call.message.chat.id,
                call.message.message_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data == "confirm_sections")
    def handle_confirm_sections(call):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            teacher_data = state_storage.data.get(call.from_user.id, {}).get(call.from_user.id, {})
            selected_sections = teacher_data.get('data', {}).get('selected_sections', [])
            
            logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {selected_sections}")
            
            if not selected_sections:
                bot.answer_callback_query(call.id, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            db_ops = DatabaseOperations(session)
            students = db_ops.get_students()
            logger.info(f"Retrieved {len(students)} students from database")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            for student in students:
                try:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                    student_id = student.telegram_id
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
                    if student_id not in data_storage.data:
                        data_storage.data[student_id] = {}
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
                    student_data = {
                        'state': str(StudentStates.waiting_for_answer),
                        'data': {
                            'test_sections': selected_sections.copy(),
                            'current_question_index': 0,
                            'score': 0
                        }
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    data_storage.data[student_id] = student_data
                    
                    logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}: {student_data}")
                    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö: {data_storage.data}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    bot.send_message(student_id, "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
                    send_test_question(bot, student_id, session)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.telegram_id}: {e}")
                    continue
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—á–∏—Ç–µ–ª—é
            bot.edit_message_text(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!",
                call.message.chat.id,
                call.message.message_id
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    @bot.callback_query_handler(func=lambda call: call.data.startswith('section_') and str(bot.get_state(call.from_user.id, call.message.chat.id)) == str(TeacherStates.waiting_for_test_sections))
    def handle_test_section_choice(call):
        try:
            section = call.data.split('_')[1]
            logger.info(f"–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {section}")
            logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {bot.get_state(call.from_user.id, call.message.chat.id)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∏—Ç–µ–ª—è
            if call.from_user.id not in state_storage.data:
                state_storage.data[call.from_user.id] = {}
            if call.from_user.id not in state_storage.data[call.from_user.id]:
                state_storage.data[call.from_user.id][call.from_user.id] = {
                    'state': str(TeacherStates.waiting_for_test_sections),
                    'data': {'selected_sections': []}
                }
            
            teacher_data = state_storage.data[call.from_user.id][call.from_user.id]
            selected_sections = teacher_data['data'].get('selected_sections', [])
            
            logger.info(f"–¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {selected_sections}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if section in selected_sections:
                selected_sections.remove(section)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ä–∞–∑–¥–µ–ª: {section}")
            else:
                selected_sections.append(section)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª: {section}")
            
            teacher_data['data']['selected_sections'] = selected_sections
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {selected_sections}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            db_ops = DatabaseOperations(session)
            all_sections = db_ops.get_available_sections()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = get_sections_keyboard(all_sections, selected_sections)
            try:
                bot.edit_message_reply_markup(
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=markup
                )
                logger.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            except ApiTelegramException as e:
                if "message is not modified" not in str(e):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                    raise
            
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–∞")

    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")