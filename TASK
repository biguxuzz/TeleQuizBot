# Техническое задание на разработку Telegram-бота (опросника)

## 1. Общие требования
Разработать Telegram-бота, предназначенного для проведения тестирования студентов по пройденному материалу. Бот должен поддерживать два интерфейса: для преподавателя и для студента.

- Бот должен работать в **Docker-контейнере**.
- База данных **PostgreSQL** должна также быть развернута в контейнере.
- Используемая библиотека для работы с Telegram API — **Telebot**.
- Разработка должна содержать **автоматические тесты**.
- Тесты должны запускаться в отдельном контейнере с отдельными ключами Telegram-бота и чатом тестирования.

## 2. Функциональные требования

### 2.1. Интерфейс преподавателя
#### 2.1.1. Управление тестами
- Преподаватель должен иметь возможность **создавать тестовые вопросы** и загружать их в систему.
- Вопрос включает:
  - Текст вопроса.
  - Список вариантов ответов (первый вариант — правильный, но перед отправкой студенту варианты перемешиваются случайным образом).
  - Название раздела, к которому принадлежит вопрос.
- Возможность **просмотра** и **удаления** вопросов.

#### 2.1.2. Управление видео-ответами
- Преподаватель может загружать **видеофайлы** с комментариями.
- Каждое видео должно быть связано с одним из трех критериев отправки:
  1. **Удача** – студент правильно ответил на все вопросы.
  2. **Неудача** – студент не ответил правильно ни на один вопрос.
  3. **Частично** – студент ответил правильно хотя бы на один вопрос.
- Видео выбирается случайным образом среди загруженных файлов, соответствующих критерию.

#### 2.1.3. Запуск тестирования
- Преподаватель должен иметь возможность **запускать тестирование**, выбрав несколько разделов.
- После запуска студенты получают вопросы из указанных разделов в случайном порядке.

#### 2.1.4. Просмотр рейтинга
- Возможность просматривать **накопленные баллы студентов** списком.
- Фильтрация по **ФИО студента** и **разделам тестирования**.

### 2.2. Интерфейс студента
#### 2.2.1. Регистрация
- При первом запуске студенту предлагается представиться:
  - Ввести **Фамилию** и **Имя**.
  - Поделиться своим **контактом** (номер телефона через Telegram API).

#### 2.2.2. Процесс тестирования
1. После запуска тестирования преподавателем студенту начинают приходить вопросы.
2. Вопросы отправляются **по одному из каждого выбранного раздела**.
3. Вопрос помечается как **заданный** после отправки студенту.
4. Выбор вопроса происходит **случайно** из тех, которые еще не были отправлены.
5. Когда все вопросы раздела заданы, метки сбрасываются, и тестирование продолжается с теми же вопросами.
6. Варианты ответов перемешиваются и нумеруются перед отправкой.
7. Ответ дается нажатием на кнопку с номером ответа в меню.
8. Если ответ правильный – студент получает **10 баллов**.
9. Баллы суммируются в общем рейтинге студента.
10. После ответа на вопрос по текущему разделу студенту приходит следующий вопрос.
11. Когда студент отвечает на все вопросы, отправляется **видео-комментарий**, соответствующий его результатам.
12. Видео выбирается **случайно** из тех, которые соответствуют критерию.

## 3. Технические требования
### 3.1. База данных (PostgreSQL)
- Хранение информации о **пользователях** (студенты, преподаватели).
- Хранение **вопросов**, **вариантов ответов** и их связи с разделами.
- Логирование ответов студентов.
- Хранение баллов студентов.
- Хранение загруженных видеофайлов и их критериев отображения.

### 3.2. Docker-контейнеризация
- **Один контейнер** с ботом.
- **Один контейнер** с базой данных PostgreSQL.
- **Один контейнер** для тестов (с отдельными API-ключами и тестовым Telegram-чатом).

### 3.3. Автоматические тесты
- Тестирование базовых функциональностей бота:
  - Регистрация пользователя.
  - Добавление вопросов преподавателем.
  - Процесс тестирования.
  - Начисление баллов.
  - Отправка видео.
- Тестирование работы базы данных.
- Тестирование корректности работы API Telegram через мокированные запросы.

---
**Конец ТЗ.**

